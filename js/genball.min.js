var genball = genball || {};

genball.models = genball.models || {};

genball.models.driveState = function() {
    var newDriveState = function(firstPossession, startTime) {
        return {
            possession: firstPossession,
            down: 1,
            distance: 10,
            at: 65,
            commentary: "",
            kickoff: true,
            clock: 900,
            quarter: 1,
            time: startTime.valueOf(),
            driveNumber: 0
        };
    };
    var clone = function(driveState) {
        return {
            possession: driveState.possession,
            down: driveState.down,
            distance: driveState.distance,
            at: driveState.at,
            commentary: driveState.commentary,
            kickoff: driveState.kickoff,
            clock: driveState.clock,
            quarter: driveState.quarter,
            time: driveState.time,
            driveNumber: driveState.driveNumber
        };
    };
    return {
        newDriveState: newDriveState,
        clone: clone
    };
};

var genball = genball || {};

genball.generators = genball.generators || {};

genball.generators.game = function(data, kickdata, home, away, gameId, startTime, gameSeed, week, debug) {
    var playGenerator = genball.generators.play(data);
    var kickoffGenerator = genball.generators.kickoff(kickdata);
    var scoreboard = genball.models.scoreboard(home.name, away.name);
    var rng = new Math.seedrandom(gameSeed);
    Math.random = rng;
    var teams = {
        home: home,
        away: away
    };
    var completed = ko.observable(false);
    var hasOTs = ko.observable(0);
    teams[away.name] = away;
    teams[home.name] = home;
    var firstToKick = _.pickRandom([ away.name, home.name ]);
    var driveState = genball.models.driveState().newDriveState(firstToKick, startTime);
    var plays = ko.observableArray();
    var setupStats = function(team) {
        team.stats[gameId] = {};
        _.each(team.players, function(player) {
            player.stats[gameId] = {};
        });
    };
    setupStats(home);
    setupStats(away);
    var changePossession = function(driveState) {
        if (driveState.possession === home.name) {
            driveState.possession = away.name;
        } else {
            driveState.possession = home.name;
        }
        driveState.down = 1;
        driveState.at = 100 - driveState.at;
        driveState.distance = Math.min(10, driveState.at);
        driveState.driveNumber++;
        return driveState;
    };
    var isTurnoverOnDowns = function(play, driveState) {
        if (driveState.down !== 4) {
            return false;
        }
        if (play.yards >= driveState.distance) {
            return false;
        }
        return true;
    };
    var downFormatter = function(down) {
        var downs = [ "1st", "2nd", "3rd", "4th" ];
        return downs[down - 1];
    };
    var atFormatter = function(driveState) {
        var at = "";
        if (driveState.at <= 50) {
            if (driveState.possession === home.name) {
                at += away.shortName;
            } else {
                at += home.shortName;
            }
            return at += " " + driveState.at;
        } else {
            if (driveState.possession === home.name) {
                at += home.shortName;
            } else {
                at += away.shortName;
            }
            return at += " " + (100 - driveState.at);
        }
    };
    var statUpdate = function(player, team, stat, change) {
        player.stats[gameId][stat] = (player.stats[gameId][stat] || 0) + change;
        player.seasonStats[stat] = (player.seasonStats[stat] || 0) + change;
        team.stats[gameId][stat] = (team.stats[gameId][stat] || 0) + change;
        team.seasonStats[stat] = (team.seasonStats[stat] || 0) + change;
    };
    var maxStatUpdate = function(player, team, stat, change) {
        player.stats[gameId][stat] = _.max([ player.stats[gameId][stat] || 0, change ]);
        player.seasonStats[stat] = _.max([ player.seasonStats[stat] || 0, change ]);
        team.stats[gameId][stat] = _.max([ player.stats[gameId][stat] || 0, change ]);
        team.seasonStats[stat] = _.max([ player.seasonStats[stat] || 0, change ]);
    };
    var teamStatUpdate = function(team, stat, change) {
        team.stats[gameId][stat] = (team.stats[gameId][stat] || 0) + change;
        team.seasonStats[stat] = (team.seasonStats[stat] || 0) + change;
    };
    var extraPoint = function(driveState) {
        if (driveState.quarter === 4 && _.contains([ -30, -29, -27, -26, -24, -22, -19, -18, -16, -15, -13, -12, -8, -5, -2, 1, 5, 12, 19, 26 ], scoreboard.getDifferenital(driveState.possession) + 6) || driveState.quarter > 6) {
            return twoPointConversion(driveState);
        } else {
            return pat(driveState);
        }
    };
    var pat = function(driveState) {
        var team = teams[driveState.possession];
        var kicker = team.getKicker();
        statUpdate(kicker, team, "XPA", 1);
        var chance = Math.random();
        driveState.commentary += kicker.fullName;
        if (chance <= kicker.skill) {
            driveState.commentary += " extra point GOOD.";
            statUpdate(kicker, team, "XPM", 1);
            scoreboard.score(driveState.possession, driveState, play, 7, driveState.quarter);
        } else {
            driveState.commentary += " extra point MISSED.";
            scoreboard.score(driveState.possession, driveState, play, 6, driveState.quarter);
        }
        return driveState;
    };
    var twoPointConversion = function(driveState) {
        var team = teams[driveState.possession];
        if (Math.random() < .45) {
            if (Math.random() < .5) {
                var rusher = team.getRusher();
                driveState.commentary += "TWO-POINT CONVERSION ATTEMPT. " + rusher.fullName + " rush SUCCEEDS.";
            } else {
                var passer = team.getPasser();
                var receiver = team.getReceiver();
                driveState.commentary += "TWO-POINT CONVERSION ATTEMPT. " + passer.fullName + " pass to " + receiver.fullName + " SUCCEEDS.";
            }
            scoreboard.score(driveState.possession, driveState, play, 8, driveState.quarter);
        } else {
            if (Math.random() < .5) {
                var rusher = team.getRusher();
                driveState.commentary += "TWO-POINT CONVERSION ATTEMPT. " + rusher.fullName + " rush FAILS.";
            } else {
                var passer = team.getPasser();
                driveState.commentary += "TWO-POINT CONVERSION ATTEMPT. " + passer.fullName + " pass INCOMPLETE.";
            }
            scoreboard.score(driveState.possession, driveState, play, 6, driveState.quarter);
        }
        return driveState;
    };
    var kickoffSetup = function(driveState) {
        driveState.kickoff = true;
        driveState.at = 65;
        driveState.down = 1;
        driveState.distance = 10;
        return driveState;
    };
    var overtimeSetup = function(driveState) {
        driveState.kickoff = false;
        driveState.at = 25;
        driveState.down = 1;
        driveState.distance = 10;
        driveState.driveNumber++;
        return driveState;
    };
    var clockFormatter = function(driveState) {
        var pad = function(n) {
            return n < 10 ? "0" + n : n;
        };
        var clock = "Q" + driveState.quarter + "-";
        var min = Math.floor(driveState.clock / 60);
        var sec = driveState.clock - min * 60;
        clock += min + ":" + pad(sec.toFixed(2));
        return clock;
    };
    var incompletePass = function(driveState, play) {
        if (isTurnoverOnDowns(play, driveState)) {
            return passingTurnoverOnDowns(driveState, play);
        }
        var team = teams[driveState.possession];
        var passer = team.getPasser();
        statUpdate(passer, team, "PA", 1);
        statUpdate(passer, team, "C", 0);
        lateDownFail(team, driveState.down);
        driveState.down++;
        driveState.commentary = passer.fullName + " PASS INCOMPLETE.";
        return driveState;
    };
    var sack = function(driveState, play) {
        if (play.safety) {
            return passingSafety(driveState, play);
        }
        var team = teams[driveState.possession];
        var passer = team.getPasser();
        statUpdate(passer, team, "RA", 1);
        statUpdate(passer, team, "RYDS", play.yards);
        lateDownFail(team, driveState.down);
        driveState.commentary = "";
        if (play.recoveredFumble) {
            statUpdate(passer, team, "FU", 1);
            driveState.commentary += passer.fullName + " FUMBLE. Recovered by " + passer.fullName + " at the " + atFormatter(driveState) + ". ";
        }
        driveState.commentary += passer.fullName + " SACKED for a loss of " + play.yards + " yds. ";
        driveState.down++;
        driveState.at -= play.yards;
        driveState.distance = Math.min(driveState.at, driveState.distance - play.yards);
        return driveState;
    };
    var pass = function(driveState, play) {
        if (play.touchdown) {
            return passingTouchdown(driveState, play);
        } else if (isTurnoverOnDowns(play, driveState)) {
            return passingTurnoverOnDowns(driveState, play);
        }
        var team = teams[driveState.possession];
        var passer = team.getPasser();
        var receiver = team.getReceiver();
        statUpdate(passer, team, "PA", 1);
        statUpdate(passer, team, "C", 1);
        statUpdate(passer, team, "PY", play.yards);
        statUpdate(receiver, team, "R", 1);
        statUpdate(receiver, team, "RECY", play.yards);
        driveState.commentary = passer.fullName + " PASS COMPLETE to " + receiver.fullName + " for " + play.yards + " yds";
        driveState.at -= play.yards;
        if (play.yards >= driveState.distance) {
            teamStatUpdate(team, "FD", 1);
            lateDownSuccess(team, driveState.down);
            driveState.commentary += " to the " + atFormatter(driveState) + " for a FIRST DOWN";
            driveState.down = 1;
            driveState.distance = Math.min(10, driveState.at);
        } else {
            lateDownFail(team, driveState.down);
            driveState.down++;
            driveState.distance = Math.min(driveState.at, driveState.distance - play.yards);
            driveState.commentary += " to the " + atFormatter(driveState) + ".";
        }
        return driveState;
    };
    var otherTeam = function(driveState) {
        if (driveState.possession === home.name) {
            return away.name;
        } else {
            return home.name;
        }
    };
    var otherTeamByName = function(team) {
        if (team === home.name) {
            return away.name;
        } else {
            return home.name;
        }
    };
    var passingSafety = function(driveState, play) {
        var team = teams[driveState.possession];
        var passer = team.getPasser();
        statUpdate(passer, team, "RA", 1);
        statUpdate(passer, team, "RYDS", play.yards);
        lateDownFail(team, driveState.down);
        driveState.commentary = "";
        if (play.recoveredFumble) {
            statUpdate(passer, team, "FU", 1);
            driveState.commentary += passer.fullName + " FUMBLE. Recovered by " + passer.fullName + " at the ";
            driveState.commentary += atFormatter(driveState) + ". ";
        }
        driveState.commentary += passer.fullName + " SACKED for a loss of " + Math.abs(play.yards) + " yds and a SAFETY. ";
        scoreboard.score(otherTeam(driveState), driveState, play, 2, driveState.quarter);
        driveState.kickoff = true;
        driveState.at = 80;
        driveState.down = 1;
        driveState.distance = 10;
        return driveState;
    };
    var rushingSafety = function(driveState, play) {
        var team = teams[driveState.possession];
        var rusher = team.getRusher();
        statUpdate(rusher, team, "RA", 1);
        statUpdate(rusher, team, "RYDS", play.yards);
        lateDownFail(team, driveState.down);
        driveState.commentary = "";
        if (play.recoveredFumble) {
            statUpdate(rusher, team, "FU", 1);
            driveState.commentary += rusher.fullName + " FUMBLE. Recovered by " + rusher.fullName + " at the ";
            driveState.commentary += atFormatter(driveState) + ". ";
        }
        driveState.commentary += rusher.fullName + " tackled for a loss of " + Math.abs(play.yards) + " yds and a SAFETY. ";
        scoreboard.score(otherTeam(driveState), driveState, play, 2, driveState.quarter);
        driveState.kickoff = true;
        driveState.at = 80;
        driveState.down = 1;
        driveState.distance = 10;
        return driveState;
    };
    var rush = function(driveState, play) {
        if (play.touchdown) {
            return rushingTouchdown(driveState, play);
        } else if (play.safety) {
            return rushingSafety(driveState, play);
        } else if (isTurnoverOnDowns(play, driveState)) {
            return rushingTurnoverOnDowns(driveState, play);
        } else if (play.sack) {
            return sack(driveState, play);
        }
        var team = teams[driveState.possession];
        var rusher = team.getRusher();
        statUpdate(rusher, team, "RA", 1);
        statUpdate(rusher, team, "RYDS", play.yards);
        driveState.commentary = "";
        driveState.at -= play.yards;
        if (play.recoveredFumble) {
            statUpdate(rusher, team, "FU", 1);
            driveState.commentary += rusher.fullName + " FUMBLE. Recovered by " + rusher.fullName + " at the ";
            driveState.commentary += atFormatter(driveState) + ". ";
        }
        driveState.commentary += rusher.fullName + " " + play.yards + " yd RUSH to the ";
        driveState.commentary += atFormatter(driveState);
        if (play.yards >= driveState.distance) {
            teamStatUpdate(team, "FD", 1);
            lateDownSuccess(team, driveState.down);
            driveState.commentary += " for a FIRST DOWN";
            driveState.down = 1;
            driveState.distance = Math.min(10, driveState.at);
        } else {
            lateDownFail(team, driveState.down);
            driveState.down++;
            driveState.distance = Math.min(driveState.at, driveState.distance - play.yards);
            driveState.commentary += ".";
        }
        return driveState;
    };
    var lateDownSuccess = function(team, down) {
        if (driveState.down === 3) {
            teamStatUpdate(team, "TDA", 1);
            teamStatUpdate(team, "TDS", 1);
        } else if (driveState.down === 4) {
            teamStatUpdate(team, "FDA", 1);
            teamStatUpdate(team, "FDS", 1);
        }
    };
    var lateDownFail = function(team, down) {
        if (driveState.down === 3) {
            teamStatUpdate(team, "TDA", 1);
        } else if (driveState.down === 4) {
            teamStatUpdate(team, "FDA", 1);
        }
    };
    var passingTouchdown = function(driveState, play) {
        var team = teams[driveState.possession];
        var passer = team.getPasser();
        var receiver = team.getReceiver();
        statUpdate(passer, team, "PA", 1);
        statUpdate(passer, team, "C", 1);
        statUpdate(passer, team, "PY", play.yards);
        statUpdate(passer, team, "PTD", 1);
        statUpdate(receiver, team, "R", 1);
        statUpdate(receiver, team, "RECTD", 1);
        statUpdate(receiver, team, "RECY", play.yards);
        lateDownSuccess(team, driveState.down);
        driveState.commentary = passer.fullName + " " + play.yards + " yd PASS to " + receiver.fullName + " COMPLETE for a TOUCHDOWN. ";
        driveState = extraPoint(driveState);
        return kickoffSetup(driveState);
    };
    var rushingTouchdown = function(driveState, play) {
        var team = teams[driveState.possession];
        var rusher = team.getRusher();
        if (play.recoveredFumble) {
            statUpdate(rusher, team, "FU", 1);
            driveState.commentary += rusher.fullName + " FUMBLE. Recovered by " + rusher.fullName + " at the ";
            driveState.commentary += atFormatter(driveState) + ". ";
        }
        lateDownSuccess(team, driveState.down);
        statUpdate(rusher, team, "RA", 1);
        statUpdate(rusher, team, "RTDS", 1);
        statUpdate(rusher, team, "RYDS", play.yards);
        driveState.commentary = rusher.fullName + " " + play.yards + " yd RUSHING TOUCHDOWN. ";
        driveState = extraPoint(driveState);
        return kickoffSetup(driveState);
    };
    var passingTurnoverOnDowns = function(driveState, play) {
        var team = teams[driveState.possession];
        var passer = team.getPasser();
        lateDownFail(team, driveState.down);
        if (play.sack) {
            statUpdate(passer, team, "RA", 1);
            statUpdate(passer, team, "RYDS", play.yards);
            driveState.commentary = passer.fullName + " SACKED for a loss of " + Math.abs(play.yards) + " yds. ";
        } else if (play.incomplete) {
            statUpdate(passer, team, "PA", 1);
            statUpdate(passer, team, "C", 0);
            driveState.commentary = passer.fullName + " PASS INCOMPLETE. ";
        } else {
            var receiver = team.getReceiver();
            statUpdate(passer, team, "PA", 1);
            statUpdate(passer, team, "C", 1);
            statUpdate(passer, team, "PY", play.yards);
            statUpdate(receiver, team, "R", 1);
            statUpdate(receiver, team, "RECY", play.yards);
            driveState.commentary = passer.fullName + " " + play.yards + " yd PASS COMPLETE to " + receiver.fullName + " ";
            driveState.at -= play.yards;
        }
        driveState.commentary += driveState.possession + " TURN OVER ON DOWNS.";
        driveState = changePossession(driveState);
        return driveState;
    };
    var rushingTurnoverOnDowns = function(driveState, play) {
        var team = teams[driveState.possession];
        var rusher = team.getRusher();
        statUpdate(rusher, team, "RA", 1);
        statUpdate(rusher, team, "RYDS", play.yards);
        lateDownFail(team, driveState.down);
        if (play.recoveredFumble) {
            statUpdate(rusher, team, "FU", 1);
            driveState.commentary = rusher.fullName + " FUMBLE. Recovered by " + rusher.fullName + " at the ";
            driveState.at -= play.yards;
            driveState.commentary += atFormatter(driveState) + ". ";
        } else {
            driveState.commentary = rusher.fullName + " " + play.yards + " yd RUSH to the ";
            driveState.at -= play.yards;
            driveState.commentary += atFormatter(driveState) + ". ";
        }
        driveState.commentary += driveState.possession + " TURN OVER ON DOWNS. ";
        driveState = changePossession(driveState);
        return driveState;
    };
    var fumble = function(driveState, play) {
        var team = teams[driveState.possession];
        var recoveringTeam = teams[otherTeam(driveState)];
        var player = _.pickRandom([ team.getRusher(), team.getPasser() ]);
        var recoverer = recoveringTeam.getRecoverer();
        statUpdate(player, team, "FU", 1);
        statUpdate(player, team, "FL", 1);
        lateDownFail(team, driveState.down);
        statUpdate(recoverer, recoveringTeam, "FR", 1);
        driveState.commentary = player.fullName + " FUMBLE. ";
        driveState.at = driveState.at - play.yards;
        if (driveState.at === 0) {
            driveState.commentary += "Recovered by " + recoverer.fullName + " in the endzone for a TOUCHBACK. ";
            driveState.at = 25;
            driveState = changePossession(driveState);
        } else if (driveState.at === 100) {
            driveState.commentary += "Recovered by " + recoverer.fullName + " in the endzone for a TOUCHDOWN. ";
            driveState = changePossession(driveState);
            driveState = extraPoint(driveState);
            driveState = kickoffSetup(driveState);
        } else {
            var driveState = changePossession(driveState);
            driveState.commentary += "Recovered by " + recoverer.fullName + ".";
        }
        return driveState;
    };
    var interception = function(driveState, play) {
        var team = teams[driveState.possession];
        var defense = teams[otherTeam(driveState)];
        var passer = team.getPasser();
        var interceptor = defense.getInterceptor();
        statUpdate(passer, team, "PA", 1);
        statUpdate(passer, team, "C", 0);
        statUpdate(passer, team, "INT", 1);
        statUpdate(interceptor, defense, "INTD", 1);
        lateDownFail(team, driveState.down);
        driveState.commentary = passer.fullName + " INTERCEPTED by " + interceptor.fullName + ". ";
        driveState.at = driveState.at - play.yards;
        var driveState = changePossession(driveState);
        return driveState;
    };
    var fieldGoal = function(play, driveState) {
        var team = teams[driveState.possession];
        var kicker = team.getKicker();
        statUpdate(kicker, team, "FGA", 1);
        var updatedState;
        driveState.commentary = kicker.fullName + " " + (driveState.at + 18);
        if (play.fieldGoalMade) {
            statUpdate(kicker, team, "FGM", 1);
            maxStatUpdate(kicker, team, "FGL", driveState.at + 18);
            driveState.commentary += " yd FIELD GOAL GOOD";
            updatedState = kickoffSetup(driveState);
            scoreboard.score(driveState.possession, driveState, play, 3, driveState.quarter);
        } else {
            statUpdate(kicker, team, "FGM", 0);
            driveState.commentary += " yd FIELD GOAL NO GOOD";
            updatedState = changePossession(driveState);
        }
        return updatedState;
    };
    var punt = function(driveState, play) {
        var puntingTeam = teams[driveState.possession];
        var punter = puntingTeam.getPunter();
        statUpdate(punter, puntingTeam, "P", 1);
        statUpdate(punter, puntingTeam, "PUYDS", play.distance);
        maxStatUpdate(punter, puntingTeam, "PL", play.distance);
        var updatedDriveState;
        if (play.blocked) {
            driveState.commentary = punter.fullName + " " + play.distance + " yd BLOCKED PUNT";
        } else {
            driveState.commentary = punter.fullName + " " + play.distance + " yd PUNT";
        }
        var receivingTeam = teams[otherTeam(driveState)];
        var returner = receivingTeam.getReturner();
        if (play.fairCatch) {
            driveState.at = driveState.at - play.distance;
            driveState = changePossession(driveState);
            driveState.commentary += " FAIR CATCH at the " + atFormatter(driveState);
            driveState.commentary += " by " + returner.fullName + ". ";
            driveState.kickoff = false;
            updatedDriveState = driveState;
        } else if (play.touchback) {
            driveState.at = 25;
            driveState = changePossession(driveState);
            driveState.commentary += " for a TOUCHBACK";
            driveState.commentary += ". ";
            driveState.kickoff = false;
            updatedDriveState = driveState;
        } else if (play.downed) {
            driveState.at = driveState.at - play.distance;
            driveState = changePossession(driveState);
            driveState.commentary += " downed at the " + atFormatter(driveState);
            driveState.commentary += ". ";
            driveState.kickoff = false;
            updatedDriveState = driveState;
        } else if (play.outOfBounds) {
            driveState.at = driveState.at - play.distance;
            driveState = changePossession(driveState);
            driveState.commentary += " out of bounds at the " + atFormatter(driveState);
            driveState.commentary += ". ";
            driveState.kickoff = false;
            updatedDriveState = driveState;
        } else if (play.returned) {
            statUpdate(returner, receivingTeam, "PR", 1);
            statUpdate(returner, receivingTeam, "PRYDS", play.returnDistance);
            maxStatUpdate(returner, receivingTeam, "PRL", play.returnDistance);
            if (play.touchdown) {
                statUpdate(returner, receivingTeam, "PRTD", 1);
                driveState.at = driveState.at - play.distance;
                driveState = changePossession(driveState);
                driveState.commentary += " to the " + atFormatter(driveState) + ". RETURNED BY " + returner.fullName + " " + play.returnDistance + " yds for a TOUCHDOWN. ";
                driveState = extraPoint(driveState);
                updatedDriveState = kickoffSetup(driveState);
            } else {
                driveState.at = driveState.at - play.distance;
                driveState = changePossession(driveState);
                driveState.distance = Math.min(10, driveState.at);
                driveState.commentary += " to the " + atFormatter(driveState) + ". RETURNED BY " + returner.fullName + " " + play.returnDistance + " yds";
                driveState.commentary += " to the " + atFormatter(driveState);
                driveState.commentary += ". ";
                driveState.kickoff = false;
                updatedDriveState = driveState;
            }
        } else {
            console.log(play);
        }
        return updatedDriveState;
    };
    var kickoff = function(driveState, play) {
        var team = teams[driveState.possession];
        var kicker = team.getKicker();
        statUpdate(kicker, team, "KO", 1);
        var receivingTeam = teams[otherTeam(driveState)];
        var returner = receivingTeam.getReturner();
        var updatedDriveState;
        driveState.commentary = kicker.fullName + " KICKOFF for " + play.distance + " yards";
        if (play.fairCatch) {
            driveState.at = driveState.at - play.distance;
            driveState = changePossession(driveState);
            driveState.commentary += " FAIR CATCH at the " + atFormatter(driveState);
            driveState.commentary += ". ";
            driveState.kickoff = false;
            updatedDriveState = driveState;
        } else if (play.touchback) {
            driveState.at = 25;
            driveState = changePossession(driveState);
            driveState.commentary += " for a TOUCHBACK";
            driveState.commentary += ". ";
            driveState.kickoff = false;
            updatedDriveState = driveState;
        } else if (play.downed) {
            driveState.at = driveState.at - play.distance;
            driveState = changePossession(driveState);
            driveState.commentary += " downed at the " + atFormatter(driveState);
            driveState.commentary += ". ";
            driveState.kickoff = false;
            updatedDriveState = driveState;
        } else if (play.returned) {
            statUpdate(returner, receivingTeam, "KOR", 1);
            statUpdate(returner, receivingTeam, "KORYDS", play.returnDistance);
            maxStatUpdate(returner, receivingTeam, "KORL", play.returnDistance);
            if (play.touchdown) {
                statUpdate(returner, receivingTeam, "KORTD", 1);
                driveState.at = driveState.at - play.distance;
                driveState = changePossession(driveState);
                driveState.commentary += " to the " + atFormatter(driveState) + ". RETURNED BY " + returner.fullName + " " + play.returnDistance + " yds for a TOUCHDOWN. ";
                driveState = extraPoint(driveState);
                updatedDriveState = kickoffSetup(driveState);
            } else {
                driveState.at = driveState.at - play.distance;
                driveState = changePossession(driveState);
                driveState.commentary += " to the " + atFormatter(driveState) + ". RETURNED BY " + returner.fullName + " " + play.returnDistance + " yds";
                driveState.at = driveState.at - play.returnDistance;
                driveState.distance = Math.min(10, driveState.at);
                driveState.commentary += " to the " + atFormatter(driveState);
                driveState.commentary += ". ";
                driveState.kickoff = false;
                updatedDriveState = driveState;
            }
        }
        return updatedDriveState;
    };
    var updateDriveState = function(play, driveState) {
        driveState.clock = Math.max(driveState.clock - teams[driveState.possession].tempo, 0);
        driveState.time += 5e3;
        if (debug) {
            console.log(clockFormatter(driveState));
        }
        if (play.type === "KICKOFF") {
            return kickoff(driveState, play);
        }
        if (play.type === "PUNT") {
            return punt(driveState, play);
        }
        if (play.type === "FIELD GOAL") {
            return fieldGoal(play, driveState);
        }
        if (play.turnover === "INTERCEPTION") {
            return interception(driveState, play);
        }
        if (play.turnover === "FUMBLE") {
            return fumble(driveState, play);
        }
        if (play.incomplete) {
            return incompletePass(driveState, play);
        }
        if (play.type === "PASS") {
            return pass(driveState, play);
        }
        if (play.type === "RUSH") {
            return rush(driveState, play);
        }
    };
    var playUntil = function(currentTime) {
        Math.random = rng;
        if (completed()) {
            return;
        }
        while (driveState.clock > 0 && driveState.quarter === 1) {
            if (driveState.time > currentTime) {
                return;
            } else {
                play();
            }
        }
        if (driveState.clock === 0 && driveState.quarter === 1) {
            plays.push({
                commentary: "End of 1st Quarter",
                homeScore: scoreboard.homeScores.total(),
                awayScore: scoreboard.awayScores.total(),
                possession: driveState.possession,
                driveNumber: driveState.driveNumber,
                quarter: 1
            });
            driveState.quarter = 2;
            driveState.clock = 900;
            driveState.time += 5e3;
        }
        if (driveState.time > currentTime) {
            return;
        }
        while (driveState.clock > 0 && driveState.quarter === 2) {
            if (driveState.time > currentTime) {
                return;
            } else {
                play();
            }
        }
        if (driveState.clock === 0 && driveState.quarter === 2) {
            plays.push({
                commentary: "End of 2nd Quarter",
                homeScore: scoreboard.homeScores.total(),
                awayScore: scoreboard.awayScores.total(),
                possession: driveState.possession,
                driveNumber: driveState.driveNumber,
                quarter: 2
            });
            driveState.driveNumber++;
            driveState.possession = otherTeamByName(firstToKick);
            driveState = kickoffSetup(driveState);
            driveState.quarter = 3;
            driveState.clock = 900;
            driveState.time += 5e3;
        }
        if (driveState.time > currentTime) {
            return;
        }
        while (driveState.clock > 0 && driveState.quarter === 3) {
            if (driveState.time > currentTime) {
                return;
            } else {
                play();
            }
        }
        if (driveState.clock === 0 && driveState.quarter === 3) {
            plays.push({
                commentary: "End of 3rd Quarter",
                homeScore: scoreboard.homeScores.total(),
                awayScore: scoreboard.awayScores.total(),
                possession: driveState.possession,
                driveNumber: driveState.driveNumber,
                quarter: 3
            });
            driveState.quarter = 4;
            driveState.clock = 900;
            driveState.time += 5e3;
        }
        if (driveState.time > currentTime) {
            return;
        }
        while (driveState.clock > 0 && driveState.quarter === 4) {
            if (driveState.time > currentTime) {
                return;
            } else {
                play();
            }
        }
        if (scoreboard.homeScores.total() !== scoreboard.awayScores.total()) {
            if (driveState.clock === 0 && driveState.quarter === 4) {
                plays.push({
                    commentary: "End of 4th Quarter",
                    homeScore: scoreboard.homeScores.total(),
                    awayScore: scoreboard.awayScores.total(),
                    possession: driveState.possession,
                    driveNumber: driveState.driveNumber,
                    quarter: 4
                });
            }
            completed(true);
            if (scoreboard.homeScores.total() > scoreboard.awayScores.total()) {
                home.record.wins++;
                away.record.losses++;
            } else {
                home.record.losses++;
                away.record.wins++;
            }
            return;
        } else {
            hasOTs(1);
            var overtimeQuarter = 5;
            if (driveState.clock === 0 && driveState.quarter === 4) {
                plays.push({
                    commentary: "End of 4th Quarter",
                    homeScore: scoreboard.homeScores.total(),
                    awayScore: scoreboard.awayScores.total(),
                    possession: driveState.possession,
                    driveNumber: driveState.driveNumber,
                    quarter: 4
                });
                driveState.quarter = overtimeQuarter;
                driveState.clock = 0;
                driveState.time += 5e3;
            }
            if (driveState.time > currentTime) {
                return;
            }
            var firstInOt = _.pickRandom([ away.name, home.name ]);
            driveState.possession = firstInOt;
            driveState = overtimeSetup(driveState);
            var possessionInOt = driveState.possession;
            while (driveState.possession === possessionInOt && !driveState.kickoff) {
                if (driveState.time > currentTime) {
                    return;
                } else {
                    play();
                }
            }
            driveState.possession = otherTeamByName(possessionInOt);
            driveState = overtimeSetup(driveState);
            possessionInOt = driveState.possession;
            while (driveState.possession === possessionInOt && !driveState.kickoff) {
                if (driveState.time > currentTime) {
                    return;
                } else {
                    play();
                }
            }
            while (scoreboard.homeScores.total() === scoreboard.awayScores.total()) {
                if (driveState.clock === 0 && driveState.quarter === overtimeQuarter) {
                    plays.push({
                        commentary: "End of OT " + hasOTs(),
                        homeScore: scoreboard.homeScores.total(),
                        awayScore: scoreboard.awayScores.total(),
                        possession: driveState.possession,
                        driveNumber: driveState.driveNumber,
                        quarter: overtimeQuarter
                    });
                    overtimeQuarter++;
                    hasOTs(overtimeQuarter - 4);
                    driveState.quarter = overtimeQuarter;
                    driveState.clock = 0;
                    driveState.time += 5e3;
                }
                if (driveState.time > currentTime) {
                    return;
                }
                var firstInOt = _.pickRandom([ away.name, home.name ]);
                driveState.possession = firstInOt;
                driveState = overtimeSetup(driveState);
                var possessionInOt = driveState.possession;
                while (driveState.possession === possessionInOt && !driveState.kickoff) {
                    if (driveState.time > currentTime) {
                        return;
                    } else {
                        play();
                    }
                }
                driveState.possession = otherTeamByName(possessionInOt);
                driveState = overtimeSetup(driveState);
                possessionInOt = driveState.possession;
                while (driveState.possession === possessionInOt && !driveState.kickoff) {
                    if (driveState.time > currentTime) {
                        return;
                    } else {
                        play();
                    }
                }
            }
            completed(true);
            if (scoreboard.homeScores.total() > scoreboard.awayScores.total()) {
                home.record.wins++;
                away.record.losses++;
            } else {
                home.record.losses++;
                away.record.wins++;
            }
            return;
        }
    };
    var forDisplay = function(oldDriveState, newDriveState, scoreboard, play) {
        return {
            commentary: newDriveState.commentary,
            homeScore: scoreboard.homeScores.total(),
            awayScore: scoreboard.awayScores.total(),
            down: oldDriveState.down,
            at: oldDriveState.at,
            distance: oldDriveState.distance,
            possession: oldDriveState.possession,
            driveNumber: oldDriveState.driveNumber,
            quarter: oldDriveState.quarter,
            clock: oldDriveState.clock
        };
    };
    var play = function() {
        if (debug) {
            console.log(driveState);
        }
        var play;
        if (driveState.kickoff) {
            play = kickoffGenerator.nextPlay(1, driveState.at);
        } else {
            play = playGenerator.nextPlay(driveState.quarter, driveState.down, driveState.distance, driveState.at, teams[driveState.possession], teams, scoreboard, driveState.clock);
        }
        var oldDriveState = genball.models.driveState().clone(driveState);
        driveState = updateDriveState(play, driveState);
        plays.push(forDisplay(oldDriveState, driveState, scoreboard));
        if (debug) {
            console.log(scoreboard);
            console.log(driveState.commentary);
        }
    };
    return {
        playUntil: playUntil,
        teams: teams,
        scoreboard: scoreboard,
        plays: plays,
        gameId: gameId,
        startTime: startTime,
        completed: completed,
        hasOTs: hasOTs,
        week: week
    };
};

genball.generators.kickoff = function(data) {
    var nextPlay = function(quarter, at) {
        var possible = _.select(data, function(play) {
            var validReturn = true;
            if (play.RYDS) {
                validReturn = at - play.KYDS + play.RYDS > 0;
            }
            return play.KYDS <= at && validReturn && !play.ON && !play.OOB;
        });
        var kick = _.pickRandom(possible);
        return genball.models.kickoff(kick);
    };
    return {
        nextPlay: nextPlay
    };
};

var genball = genball || {};

genball.init = genball.init || {};

genball.init = function(data) {
    var teamGenerator = genball.generators.teams(data.teamData, data.firstNames, data.lastNames, data.xpmSkill);
    return {
        games: [ genball.generators.game(data.playData[0], data.kickdata[0], teamGenerator.newTeam(), teamGenerator.newTeam(), 1, false) ]
    };
};

var genball = genball || {};

genball.models = genball.models || {};

genball.models.kickoff = function(kickoffData) {
    return {
        type: "KICKOFF",
        fairCatch: kickoffData.FC,
        downed: kickoffData.DWN,
        touchback: kickoffData.TB,
        returned: kickoffData.RYDS || kickoffData.RYDS === 0,
        returnDistance: kickoffData.RYDS,
        touchdown: kickoffData.TD,
        distance: kickoffData.KYDS
    };
};

var genball = genball || {};

genball.models = genball.models || {};

genball.models.play = function(playData) {
    var types = {
        PA: "PASS",
        R: "RUSH",
        N: "PUNT",
        FG: "FIELD GOAL"
    };
    var fumble = playData.Fl;
    var recoveredFumble = playData.Fu && !fumble;
    var interception = playData.I;
    var turnover = function() {
        if (fumble) {
            return "FUMBLE";
        }
        if (interception) {
            return "INTERCEPTION";
        }
        return false;
    };
    var incomplete = function() {
        return playData.Ty === "PA" && playData.C === 0;
    };
    var sack = function() {
        return playData.Ty === "R" && playData.Sk === 1;
    };
    return {
        type: types[playData.Ty],
        yards: playData.Y,
        touchdown: !!playData.T,
        turnover: turnover(),
        fieldGoalMade: !!playData.FGM,
        incomplete: incomplete(),
        sack: sack(),
        safety: playData.St,
        recoveredFumble: recoveredFumble
    };
};

genball.generators.play = function(data) {
    var downMoreThanThreeLate = function(quarter, down, distance, at, possession, teams, scoreboard, clock) {
        var possible = [];
        possible = _.select(data[quarter], function(play) {
            return play.Dn === down && play.Dis === distance && play.At === at && !_.contains([ "FG", "N" ], play.Ty);
        });
        for (var i = 1; i < 6 && possible.length === 0; i++) {
            possible = _.select(data[i], function(play) {
                return play.Dis === distance && play.At === at && !_.contains("FG", "N", play.Ty);
            });
        }
        if (possible.length === 0) {
            console.log('Down More Than Three Late: "Dn":' + down + ',"Dis":' + distance + ',"At":' + at);
            possible = [ {
                F: 2,
                Q: 3,
                Dn: 2,
                Dis: 1,
                At: 9,
                Ty: "PA",
                C: 0,
                Y: 0,
                T: 0,
                I: 0
            } ];
        }
        return possible;
    };
    var downThreeOrLessLate = function(quarter, down, distance, at, possession, teams, scoreboard, clock) {
        var possible = [];
        possible = _.select(data[quarter], function(play) {
            return play.Dn === down && play.Dis === distance && play.At === at && !_.contains([ "N" ], play.Ty);
        });
        for (var i = 1; i < 6 && possible.length === 0; i++) {
            possible = _.select(data[i], function(play) {
                return play.Dis === distance && play.At === at && !_.contains("N", play.Ty);
            });
        }
        if (possible.length === 0) {
            console.log('Down Less Than Three Late: "Dn":' + down + ',"Dis":' + distance + ',"At":' + at);
            possible = [ {
                F: 2,
                Q: 3,
                Dn: 2,
                Dis: 1,
                At: 9,
                Ty: "PA",
                C: 0,
                Y: 0,
                T: 0,
                I: 0
            } ];
        }
        return possible;
    };
    var lastPlayKick = function(quarter, down, distance, at, possession, teams, scoreboard, clock) {
        var possible = [];
        possible = _.select(data[quarter], function(play) {
            return play.Dn === down && play.Dis === distance && play.At === at && play.Ty === "FG";
        });
        for (var i = 1; i < 6 && possible.length === 0; i++) {
            possible = _.select(data[i], function(play) {
                return play.At === at && play.Ty === "FG";
            });
        }
        if (possible.length === 0) {
            console.log('Last Play Kick: "Dn":' + down + ',"Dis":' + distance + ',"At":' + at);
            possible = [ {
                F: 2,
                Q: 3,
                Dn: 2,
                Dis: 1,
                At: 9,
                Ty: "PA",
                C: 0,
                Y: 0,
                T: 0,
                I: 0
            } ];
        }
        return possible;
    };
    var otMustScoreTouchdown = function(quarter, down, distance, at, possession, teams, scoreboard, clock) {
        var possible = [];
        possible = _.select(data[quarter], function(play) {
            return play.Dn === down && play.Dis === distance && play.At === at && !_.contains([ "FG", "N" ], play.Ty);
        });
        for (var i = 1; i < 6 && possible.length === 0; i++) {
            possible = _.select(data[i], function(play) {
                return play.Dis === distance && play.At === at && !_.contains("FG", "N", play.Ty);
            });
        }
        if (possible.length === 0) {
            console.log('OT must score TD: "Dn":' + down + ',"Dis":' + distance + ',"At":' + at);
            possible = [ {
                F: 2,
                Q: 3,
                Dn: 2,
                Dis: 1,
                At: 9,
                Ty: "PA",
                C: 0,
                Y: 0,
                T: 0,
                I: 0
            } ];
        }
        return possible;
    };
    var normalSituation = function(quarter, down, distance, at, possession, teams, scoreboard, clock) {
        var possible = [];
        possible = _.select(data[quarter], function(play) {
            return play.Dn === down && play.Dis === distance && play.At === at;
        });
        for (var i = 1; i < 6 && possible.length === 0; i++) {
            possible = _.select(data[i], function(play) {
                return play.Dn === down && play.Dis === distance && play.At === at;
            });
        }
        if (possible.length === 0) {
            console.log('Normal: "Dn":' + down + ',"Dis":' + distance + ',"At":' + at);
            possible = [ {
                F: 2,
                Q: 3,
                Dn: 2,
                Dis: 1,
                At: 9,
                Ty: "PA",
                C: 0,
                Y: 0,
                T: 0,
                I: 0
            } ];
        }
        return possible;
    };
    var nextPlay = function(quarter, down, distance, at, possession, teams, scoreboard, clock) {
        var possible = [];
        var differential = scoreboard.getDifferenital(possession);
        var avoidTypes = [];
        if (quarter === 4 && differential < -3 && at < 60) {
            possible = downMoreThanThreeLate(quarter, down, distance, at, possession, teams, scoreboard, clock);
        } else if (quarter === 4 && differential > -4 && differential <= 0 && clock < 25 && at < 46) {
            possible = lastPlayKick(quarter, down, distance, at, possession, teams, scoreboard, clock);
        } else if (quarter === 4 && differential > -4 && differential < 0 && clock < 180) {
            possible = downThreeOrLessLate(quarter, down, distance, at, possession, teams, scoreboard, clock);
        } else if (quarter > 4 && differential < -3 || quarter > 6) {
            possible = otMustScoreTouchdown(quarter, down, distance, at, possession, teams, scoreboard, clock);
        } else {
            possible = normalSituation(quarter, down, distance, at, possession, teams, scoreboard, clock);
        }
        var play;
        if (possible.length > 1 && Math.random() > .7) {
            possible = _.sortBy(possible, function(play) {
                if (play.Ty === "N") {
                    return play.Y;
                }
                return play.Y + play.T * 100;
            });
            var index = Math.round((possible.length - 1) * possession.skill);
            play = possible[index];
        } else {
            play = _.pickRandom(possible);
        }
        if (play.Ty === "N") {
            return genball.models.punt(play);
        }
        return genball.models.play(play);
    };
    return {
        nextPlay: nextPlay
    };
};

var genball = genball || {};

genball.models = genball.models || {};

genball.models.punt = function(puntData) {
    return {
        type: "PUNT",
        fairCatch: !!puntData.Fc,
        downed: !!puntData.Dwn,
        blocked: !!puntData.Blk,
        outOfBounds: !!puntData.Oob,
        touchback: !!puntData.Tb,
        returned: !!puntData.Ry || puntData.Ry === 0,
        returnDistance: puntData.Ry,
        touchdown: !!puntData.T,
        distance: puntData.Y
    };
};

var genball = genball || {};

genball.generators = genball.generators || {};

genball.generators.schedule = function() {
    var schedule = function(startWeek) {
        var weeks = [ [ [ 1, 8 ], [ 2, 6 ], [ 5, 0 ], [ 7, 4 ], [ 9, 3 ] ], [ [ 3, 1 ], [ 6, 9 ], [ 7, 5 ], [ 8, 2 ], [ 0, 4 ] ], [ [ 2, 3 ], [ 4, 9 ], [ 5, 8 ], [ 7, 6 ], [ 0, 1 ] ], [ [ 4, 1 ], [ 5, 2 ], [ 6, 3 ], [ 8, 7 ], [ 9, 0 ] ], [ [ 1, 2 ], [ 3, 0 ], [ 4, 5 ], [ 8, 6 ], [ 9, 7 ] ], [ [ 1, 5 ], [ 2, 9 ], [ 4, 8 ], [ 7, 3 ], [ 0, 6 ] ], [ [ 2, 4 ], [ 5, 3 ], [ 6, 1 ], [ 9, 8 ], [ 0, 7 ] ], [ [ 1, 7 ], [ 2, 0 ], [ 3, 8 ], [ 5, 9 ], [ 6, 4 ] ], [ [ 3, 4 ], [ 6, 5 ], [ 7, 2 ], [ 8, 0 ], [ 9, 1 ] ] ];
        weeks = _.shuffle(weeks);
        var id = 0;
        var games = [];
        _.each(weeks, function(matchups, index) {
            var shuffledMatches = _.shuffle(matchups);
            var week = startWeek + index;
            var early = moment.tz("America/Detroit").week(week).day("Saturday").hour(13).minute(0).second(0);
            var mid = moment.tz("America/Detroit").week(week).day("Saturday").hour(15).minute(30).second(0);
            var late = moment.tz("America/Detroit").week(week).day("Saturday").hour(19).minute(0).second(0);
            var times = [ late, mid, mid, early, early ];
            _.each(shuffledMatches, function(match) {
                id++;
                games.push({
                    id: id,
                    teams: match,
                    time: times.pop(),
                    week: index
                });
            });
        });
        return games;
    };
    var scheduleConcurrent = function(startDay) {
        var weeks = [ [ [ 1, 8 ], [ 2, 6 ], [ 5, 0 ], [ 7, 4 ], [ 9, 3 ] ], [ [ 3, 1 ], [ 6, 9 ], [ 7, 5 ], [ 8, 2 ], [ 0, 4 ] ], [ [ 2, 3 ], [ 4, 9 ], [ 5, 8 ], [ 7, 6 ], [ 0, 1 ] ], [ [ 4, 1 ], [ 5, 2 ], [ 6, 3 ], [ 8, 7 ], [ 9, 0 ] ], [ [ 1, 2 ], [ 3, 0 ], [ 4, 5 ], [ 8, 6 ], [ 9, 7 ] ], [ [ 1, 5 ], [ 2, 9 ], [ 4, 8 ], [ 7, 3 ], [ 0, 6 ] ], [ [ 2, 4 ], [ 5, 3 ], [ 6, 1 ], [ 9, 8 ], [ 0, 7 ] ], [ [ 1, 7 ], [ 2, 0 ], [ 3, 8 ], [ 5, 9 ], [ 6, 4 ] ], [ [ 3, 4 ], [ 6, 5 ], [ 7, 2 ], [ 8, 0 ], [ 9, 1 ] ] ];
        weeks = _.shuffle(weeks);
        var id = 0;
        var games = [];
        _.each(weeks, function(matchups, index) {
            var shuffledMatches = _.shuffle(matchups);
            var day = startDay + index;
            var early = moment.tz("America/Detroit").dayOfYear(day).hour(1).minute(45).second(0);
            var mid = moment.tz("America/Detroit").dayOfYear(day).hour(1).minute(50).second(0);
            var late = moment.tz("America/Detroit").dayOfYear(day).hour(1).minute(55).second(0);
            var times = [ late, mid, mid, early, early ];
            _.each(shuffledMatches, function(match) {
                id++;
                games.push({
                    id: id,
                    teams: match,
                    time: times.pop(),
                    week: index
                });
            });
        });
        return games;
    };
    return {
        schedule: schedule,
        scheduleConcurrent: scheduleConcurrent
    };
};

var genball = genball || {};

genball.models = genball.models || {};

genball.models.scoreboard = function(home, away) {
    var quarters = {
        1: "first",
        2: "second",
        3: "third",
        4: "fourth",
        5: "OT"
    };
    var teamScore = function(team) {
        return {
            quarters: ko.observableArray([ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ]),
            total: ko.observable(0)
        };
    };
    var forDisplay = function(driveState) {
        return {
            possession: driveState.possession,
            down: driveState.down,
            distance: driveState.distance,
            at: driveState.at,
            commentary: driveState.commentary,
            kickoff: driveState.kickoff,
            clock: driveState.clock,
            quarter: driveState.quarter,
            time: driveState.time,
            driveNumber: driveState.driveNumber,
            homeScore: homeScores.total(),
            awayScore: awayScores.total()
        };
    };
    var teamScores = {};
    var homeScores = teamScore();
    var awayScores = teamScore();
    var scoringPlays = ko.observableArray();
    var score = function(team, driveState, play, points, quarter) {
        if (team === home) {
            var line = homeScores;
        } else {
            var line = awayScores;
        }
        line.total(line.total() + points);
        line.quarters()[quarter - 1] = line.quarters()[quarter - 1] + points;
        line.quarters.notifySubscribers();
        scoringPlays.push(forDisplay(driveState));
    };
    var getDifferenital = function(team) {
        if (team.name === home) {
            return homeScores.total() - awayScores.total();
        }
        return awayScores.total() - homeScores.total();
    };
    return {
        score: score,
        getDifferenital: getDifferenital,
        homeScores: homeScores,
        awayScores: awayScores,
        scoringPlays: scoringPlays
    };
};

var genball = genball || {};

genball.models = genball.models || {};

genball.models.team = function(info, coach, OC, DC, tempo, players, institution, stadium, id, logo, skill) {
    var getKicker = function() {
        return _.find(players, function(player) {
            return player.position === "K";
        });
    };
    var getPunter = function() {
        return _.find(players, function(player) {
            return player.position === "P";
        });
    };
    var getRushers = function() {
        return _.select(players, function(player) {
            return player.rushChance;
        });
    };
    var getPassers = function() {
        return _.select(players, function(player) {
            return player.passChance;
        });
    };
    var getReceiver = function() {
        var chance = Math.random();
        return _.find(_.sortBy(getReceivers(), "receiveChance"), function(player) {
            return chance <= player.receiveChance;
        });
    };
    var getReceivers = function() {
        return _.select(players, function(player) {
            return player.receiveChance;
        });
    };
    var getPasser = function() {
        var chance = Math.random();
        return _.find(_.sortBy(getPassers(), "passChance"), function(player) {
            return chance <= player.passChance;
        });
    };
    var getRusher = function() {
        var chance = Math.random();
        return _.find(_.sortBy(getRushers(), "rushChance"), function(player) {
            return chance <= player.rushChance;
        });
    };
    var returners = _.chain(players).select(function(player) {
        return _.contains([ "WR", "CB", "S" ], player.position);
    }).sample(2).value();
    var interceptors = _.chain(players).select(function(player) {
        return _.contains([ "DB", "CB", "S" ], player.position);
    }).sample(4).value();
    var recoverers = _.chain(players).select(function(player) {
        return _.contains([ "DB", "LB", "DL" ], player.position);
    }).sample(4).value();
    var getReturner = function() {
        return _.pickRandom(returners);
    };
    var getRecoverer = function() {
        return _.pickRandom(recoverers);
    };
    var getInterceptor = function() {
        return _.pickRandom(interceptors);
    };
    return {
        getKicker: getKicker,
        getPunter: getPunter,
        getPasser: getPasser,
        getInterceptor: getInterceptor,
        getReceiver: getReceiver,
        getRusher: getRusher,
        getRecoverer: getRecoverer,
        getReturner: getReturner,
        name: info.N,
        logo: logo,
        color: info.teamColor,
        shortName: institution.shortName,
        coach: coach,
        OC: OC,
        DC: DC,
        tempo: tempo,
        id: id,
        players: _.sortBy(players, "lastName"),
        institution: institution,
        stadium: stadium,
        record: {
            wins: 0,
            losses: 0
        },
        skill: skill,
        stats: [],
        seasonStats: {}
    };
};

var genball = genball || {};

genball.generators = genball.generators || {};

genball.generators.teams = function(data, firstNames, lastNames, xpmSkill, logos) {
    var generators = {
        generator: function(data) {
            var next = function next() {
                return _.pickRandom(data);
            };
            return {
                next: next
            };
        },
        fullNameGenerator: function(firstNameGenerator, lastNameGenerator) {
            var next = function() {
                var firstName = firstNameGenerator.next();
                var lastName = lastNameGenerator.next();
                return {
                    firstName: firstName,
                    lastName: lastName,
                    fullName: firstName + " " + lastName
                };
            };
            return {
                next: next
            };
        },
        stadiumGenerator: function(lastNameGenerator) {
            var next = function(teamName, institution) {
                var genericGenerator = function() {
                    return _.pickRandom([ "Memorial Stadium", "Alumni Stadium" ], 1)[0];
                };
                var suffixGenerator = function() {
                    return _.pickRandom([ " Stadium", " Field", " Memorial Stadium" ]);
                };
                var teamNameGenerator = function() {
                    return teamName + suffixGenerator();
                };
                var placeNameGenerator = function() {
                    return institution.location + suffixGenerator();
                };
                var lastNameStadiumGenerator = function() {
                    return lastNameGenerator.next() + suffixGenerator();
                };
                var generator = _.pickRandom([ genericGenerator, teamNameGenerator, placeNameGenerator, lastNameStadiumGenerator ]);
                return generator();
            };
            return {
                next: next
            };
        },
        institutionGenerator: function(places) {
            var prefixes = [ "Western ", "Northern ", "Eastern ", "Southern ", "Northeastern ", "Northwestern ", "Southwestern ", "Southeastern " ];
            var suffixes = [ " University", " A&M", " Tech", " College", " State" ];
            var next = function() {
                var placeData = _.popRandom(places);
                var hasPrefix = false;
                var name = "";
                var logoLetter = "";
                if (Math.random() > .45) {
                    hasPrefix = true;
                    name += _.pickRandom(prefixes);
                } else if (Math.random() > .5) {
                    name += "University of ";
                }
                name += placeData.N;
                if (name.indexOf("University") < 0) {
                    if (!hasPrefix) {
                        suffixes.push(" Institute of Technology");
                        suffixes.push(" State University");
                    }
                    name += _.pickRandom(suffixes);
                    if (Math.random() > .5) {
                        logoLetter = name[0];
                    } else {
                        var placeNameArray = name.split(" ");
                        logoLetter = _.reduce(placeNameArray, function(memo, word) {
                            if (word === "" || word === "of" || word === "A&M") {
                                return memo;
                            }
                            return memo.concat(word[0]);
                        }, "");
                    }
                } else {
                    var placeNameArray = placeData.N.split(" ");
                    if (placeNameArray.length > 1) {
                        logoLetter = _.reduce(placeNameArray, function(memo, word) {
                            if (word === "" || word === "of") {
                                return memo;
                            }
                            return memo.concat(word[0]);
                        }, "U");
                    } else {
                        logoLetter = placeData.N[0];
                    }
                }
                var shortName;
                if (logoLetter.length === 3 || logoLetter.length === 4) {
                    shortName = logoLetter;
                } else {
                    var placeNameArray = placeData.N.split(" ");
                    var shortWords = _.select(placeNameArray, function(word) {
                        return word.length === 3 || word.length === 4;
                    });
                    if (shortWords.length > 0) {
                        shortName = _.pickRandom(shortWords).toUpperCase();
                    } else {
                        var withoutVowels = _.map(placeNameArray, function(word) {
                            var firstLetter = word[0];
                            var rest = word.slice(1);
                            return firstLetter + rest.replace(/[aeiou]/gi, "");
                        });
                        var noVowels = _.select(withoutVowels, function(word) {
                            return word.length === 3 || word.length === 4;
                        });
                        if (noVowels.length > 0) {
                            shortName = _.pickRandom(noVowels).toUpperCase();
                        } else {
                            shortName = _.sortBy(withoutVowels, "length")[0].substring(0, 3).toUpperCase();
                        }
                    }
                }
                return {
                    location: placeData.N,
                    name: name,
                    shortName: shortName,
                    logoLetter: logoLetter,
                    lat: placeData.Lat,
                    lon: placeData.Lon
                };
            };
            return {
                next: next
            };
        },
        playerGenerator: function(fullNameGenerator, xpmSkill) {
            var next = function(position, depth, rushChance, passChance, receiveChance, number) {
                var player = {};
                _.extend(player, fullNameGenerator.next());
                player.height = "6-" + _.randomBetween(0, 9);
                player.position = position;
                player.depth = depth;
                player.year = _.pickRandom([ "FR", "RS FR", "SO", "SO", "RS SO", "JR", "JR", "RS JR", "SR", "SR", "RS SR" ]);
                player.number = number;
                player.stats = [];
                player.seasonStats = {};
                if (rushChance) {
                    player.rushChance = rushChance;
                }
                if (passChance) {
                    player.passChance = passChance;
                }
                if (receiveChance) {
                    player.receiveChance = receiveChance;
                }
                if (position === "K") {
                    return nextKicker(player);
                }
                return player;
            };
            var nextKicker = function(player) {
                var skill = _.randomBetween(0, 103);
                player.skill = _.find(xpmSkill, function(xp) {
                    return xp[1] >= skill;
                })[0] * .01;
                return player;
            };
            return {
                nextKicker: nextKicker,
                next: next
            };
        },
        logoGenerator: function(logos) {
            var logoFor = function(info, institution) {
                if (info.L) {
                    return _.template(logos[info.L])({
                        color: info.teamColor
                    });
                } else {
                    var text = institution.logoLetter;
                    if (text.length === 1) {
                        var textLogoTemplate = _.template('<rect ry="8" rx="8" id="svg_2" height="50" width="50" y="0" x="0" stroke-width="5" fill="#bfbfbf"/><text font-family="<%= font %>" text-anchor="middle" x="<%= x%>" y="37" font-size="33"<%= bold%><%= italics%>fill="<%= color %>" <%= stroke %>><%= letter %></text>');
                        var textLogoTemplate = _.template('<rect ry="8" rx="8" id="svg_2" height="50" width="50" y="0" x="0" stroke-width="5" fill="#bfbfbf"/><text font-family="<%= font %>" text-anchor="middle" x="<%= x%>" y="37" font-size="33"<%= bold%><%= italics%>fill="<%= color %>" <%= stroke %>><%= letter %></text>');
                    } else if (text.length === 3 && Math.random() > .5) {
                        var textLogoTemplate = _.template(_.pickRandom([ '<rect ry="8" rx="8" id="svg_2" height="50" width="50" y="0" x="0" stroke-width="5" fill="#bfbfbf"/> <text font-family="<%= font %>" text-anchor="start" textLength="16" lengthAdjust="spacingAndGlyphs" x="2" y="33" font-size="33"<%= bold%><%= italics%>fill="<%= color %>" <%= stroke %>><%= letter[0] %></text> <text font-family="<%= font %>" text-anchor="middle" textLength="16" lengthAdjust="spacingAndGlyphs" x="25" y="37" font-size="33"<%= bold%><%= italics%>fill="<%= color %>" <%= stroke %>><%= letter[1] %></text> <text font-family="<%= font %>" text-anchor="end" textLength="16" lengthAdjust="spacingAndGlyphs" x="48" y="41" font-size="33"<%= bold%><%= italics%>fill="<%= color %>" <%= stroke %>><%= letter[2] %></text>', '<rect ry="8" rx="8" id="svg_2" height="50" width="50" y="0" x="0" stroke-width="5" fill="#bfbfbf"/> <text font-family="<%= font %>" text-anchor="start" textLength="16" lengthAdjust="spacingAndGlyphs" x="2" y="41" font-size="33"<%= bold%><%= italics%>fill="<%= color %>" <%= stroke %>><%= letter[0] %></text> <text font-family="<%= font %>" text-anchor="middle" textLength="16" lengthAdjust="spacingAndGlyphs" x="25" y="37" font-size="33"<%= bold%><%= italics%>fill="<%= color %>" <%= stroke %>><%= letter[1] %></text> <text font-family="<%= font %>" text-anchor="end" textLength="16" lengthAdjust="spacingAndGlyphs" x="48" y="33" font-size="33"<%= bold%><%= italics%>fill="<%= color %>" <%= stroke %>><%= letter[2] %></text>' ]));
                    } else if (text.length === 4) {
                        var textLogoTemplate = _.template('<rect ry="8" rx="8" id="svg_2" height="50" width="50" y="0" x="0" stroke-width="5" fill="#bfbfbf"/> <text font-family="<%= font %>" text-anchor="start" textLength="32" lengthAdjust="spacingAndGlyphs" x="9" y="22" font-size="24"<%= bold%><%= italics%>fill="<%= color %>" <%= stroke %>><%= letter.slice(0,2) %></text> <text font-family="<%= font %>" text-anchor="middle" textLength="32" lengthAdjust="spacingAndGlyphs" x="25" y="43" font-size="24"<%= bold%><%= italics%>fill="<%= color %>" <%= stroke %>><%= letter.slice(2,4) %></text>');
                    } else {
                        var textLogoTemplate = _.template('<rect ry="8" rx="8" id="svg_2" height="50" width="50" y="0" x="0" stroke-width="5" fill="#bfbfbf"/><text font-family="<%= font %>" textLength="<%= textLength %>" lengthAdjust="spacingAndGlyphs" text-anchor="middle" x="<%= x%>" y="37" font-size="33"<%= bold%><%= italics%>fill="<%= color %>" <%= stroke %>><%= letter %></text>');
                    }
                    var font = text.length <= 2 && Math.random() > .5 ? _.pickRandom([ "Holtwood One SC", "Lily Script One" ]) : "Graduate";
                    var bold = Math.random() > .55 ? ' font-weight = "bold" ' : "";
                    if (Math.random() > .55) {
                        var italics = ' font-style = "italic" ';
                        var textLength = "34";
                        var x = "21";
                    } else {
                        var italics = "";
                        var textLength = "40";
                        var x = "25";
                    }
                    var stroke = "";
                    if (Math.random() > .33) {
                        stroke = 'stroke="black" stroke-width="1.25"';
                    }
                    return textLogoTemplate({
                        font: font,
                        color: info.teamColor,
                        letter: text,
                        stroke: stroke,
                        textLength: textLength,
                        bold: bold,
                        x: x,
                        italics: italics
                    });
                }
            };
            return {
                logoFor: logoFor
            };
        },
        teamInfoGenerator: function(teamData) {
            var teamInfos = [];
            var existantLogos = [];
            var colors = [ "firebrick", "goldenrod", "orange", "darkorange", "red", "orangered", "green", "blue", "darkred", "maroon", "royalblue", "saddlebrown", "crimson", "yellow", "gold" ];
            var next = function() {
                var teamToAdd = _.popRandom(teamData);
                if (teamToAdd.C !== "") {
                    teamToAdd.teamColor = teamToAdd.C;
                } else {
                    teamToAdd.teamColor = _.pickRandom(colors);
                }
                if (teamToAdd.L.length > 0) {
                    var validLogo = _.find(teamToAdd.L, function(logo) {
                        return !_.contains(existantLogos, logo);
                    });
                    if (validLogo) {
                        existantLogos.push(validLogo);
                        teamToAdd.L = validLogo;
                    } else {
                        teamToAdd.L = "";
                    }
                } else {
                    teamToAdd.L = "";
                }
                return teamToAdd;
            };
            return {
                next: next
            };
        },
        uniformGenerator: function() {
            var positions = {
                WR: _.range(1, 50),
                TE: _.range(80, 100),
                RB: _.range(1, 50),
                QB: _.range(1, 50),
                OT: _.range(70, 80),
                OL: _.range(50, 80),
                G: _.range(60, 70),
                C: _.range(50, 60),
                LS: _.range(50, 60),
                K: _.range(1, 50),
                P: _.range(1, 50),
                CB: _.range(1, 100),
                S: _.range(1, 100),
                LB: _.range(1, 100),
                DL: _.range(1, 100),
                DT: _.range(1, 100),
                DE: _.range(1, 100),
                DB: _.range(1, 100)
            };
            var numbers = _.shuffle(_.range(1, 100));
            var numberFor = function(position) {
                var number = _.find(numbers, function(num) {
                    return _.contains(positions[position], num);
                });
                numbers = _.without(numbers, number);
                return number;
            };
            return {
                numberFor: numberFor
            };
        },
        teamGenerator: function(teamInfoGenerator, fullNameGenerator, institutionGenerator, playerGenerator, stadiumGenerator, uniformGeneratorGenerator, logoGenerator) {
            var teamId = 0;
            var next = function() {
                var info = teamInfoGenerator.next();
                var coach = fullNameGenerator.next();
                var OC = fullNameGenerator.next();
                var DC = fullNameGenerator.next();
                var runningType = _.pickRandom([ {
                    QB0: .5,
                    RB0: .95,
                    RB1: 1
                }, {
                    RB0: .9,
                    RB1: 1
                }, {
                    RB0: .85,
                    RB1: .95,
                    WR0: 1
                }, {
                    QB0: .33,
                    RB0: 1
                }, {
                    RB0: .55,
                    RB1: 1
                } ]);
                var passingType = _.pickRandom([ {
                    QB0: 1
                }, {
                    QB0: .95,
                    QB1: 1
                }, {
                    QB0: .97,
                    RB1: 1
                } ]);
                var receivingType = _.pickRandom([ {
                    WR0: .7,
                    WR1: .9,
                    WR2: .93,
                    TE0: .95,
                    RB0: 1
                }, {
                    WR0: .6,
                    WR1: .85,
                    WR2: .93,
                    TE0: .95,
                    RB0: 1
                }, {
                    WR0: .5,
                    WR1: .75,
                    WR2: .8,
                    TE0: .9,
                    RB0: 1
                }, {
                    WR0: .5,
                    WR1: .75,
                    WR2: .78,
                    TE0: .8,
                    RB0: 1
                }, {
                    WR0: .2,
                    WR1: .4,
                    WR2: .6,
                    TE0: .8,
                    RB0: 1
                }, {
                    WR0: .2,
                    WR1: .4,
                    TE0: .8,
                    RB0: 1
                }, {
                    WR0: .2,
                    WR1: .4,
                    TE0: .6,
                    RB0: 1
                }, {
                    WR0: .5,
                    WR1: .6,
                    TE0: .7,
                    RB0: 1
                } ]);
                var tempo = _.normal(25.17, 3.197);
                var skill = _.bound(.3, .9, _.normal(.5, .25));
                var uniformGenerator = uniformGeneratorGenerator();
                var players = [];
                _.each([ {
                    name: "WR",
                    num: 6
                }, {
                    name: "TE",
                    num: 7
                }, {
                    name: "RB",
                    num: 7
                }, {
                    name: "QB",
                    num: 4
                }, {
                    name: "OT",
                    num: 4
                }, {
                    name: "OL",
                    num: 5
                }, {
                    name: "G",
                    num: 5
                }, {
                    name: "C",
                    num: 3
                }, {
                    name: "LS",
                    num: 2
                }, {
                    name: "K",
                    num: 5
                }, {
                    name: "P",
                    num: 1
                }, {
                    name: "CB",
                    num: 8
                }, {
                    name: "S",
                    num: 6
                }, {
                    name: "LB",
                    num: 12
                }, {
                    name: "DL",
                    num: 8
                }, {
                    name: "DT",
                    num: 3
                }, {
                    name: "DE",
                    num: 7
                }, {
                    name: "DB",
                    num: 6
                } ], function(position) {
                    _.times(position.num, function(index) {
                        player = playerGenerator.next(position.name, index, runningType[position.name + index], passingType[position.name + index], receivingType[position.name + index], uniformGenerator.numberFor(position.name));
                        players.push(player);
                    });
                });
                var institution = institutionGenerator.next();
                var stadium = stadiumGenerator.next(info.N, institution);
                var logo = logoGenerator.logoFor(info, institution);
                var id = teamId;
                teamId++;
                return genball.models.team(info, coach, OC, DC, tempo, players, institution, stadium, id, logo, skill);
            };
            return {
                next: next
            };
        }
    };
    var lastNameGenerator = generators.generator(lastNames[0]);
    var firstNameGenerator = generators.generator(firstNames[0]);
    var fullNameGenerator = generators.fullNameGenerator(firstNameGenerator, lastNameGenerator);
    var institutionGenerator = generators.institutionGenerator(data[0].places);
    var playerGenerator = generators.playerGenerator(fullNameGenerator, xpmSkill[0]);
    var teamInfoGenerator = generators.teamInfoGenerator(data[0].teams);
    var stadiumGenerator = generators.stadiumGenerator(lastNameGenerator);
    var logoGenerator = generators.logoGenerator(logos[0]);
    var teamGenerator = generators.teamGenerator(teamInfoGenerator, fullNameGenerator, institutionGenerator, playerGenerator, stadiumGenerator, generators.uniformGenerator, logoGenerator);
    return {
        newTeam: teamGenerator.next
    };
};